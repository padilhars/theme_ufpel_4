// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * SCSS Mixins for UFPel theme.
 *
 * @package    theme_ufpel
 * @copyright  2025 Universidade Federal de Pelotas
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

// ============================================================================
// UFPel Theme Mixins
// ============================================================================

// Transitions
@mixin ufpel-transition($properties...) {
    $transition-list: ();
    @each $property in $properties {
        $transition-list: append($transition-list, $property $ufpel-transition-speed $ufpel-transition-timing, comma);
    }
    transition: $transition-list;
}

@mixin ufpel-transition-fast($properties...) {
    $transition-list: ();
    @each $property in $properties {
        $transition-list: append($transition-list, $property $ufpel-transition-speed-fast $ufpel-transition-timing, comma);
    }
    transition: $transition-list;
}

@mixin ufpel-transition-slow($properties...) {
    $transition-list: ();
    @each $property in $properties {
        $transition-list: append($transition-list, $property $ufpel-transition-speed-slow $ufpel-transition-timing, comma);
    }
    transition: $transition-list;
}

// Hover effects
@mixin ufpel-hover-lift() {
    @include ufpel-transition(transform, box-shadow);
    
    &:hover {
        transform: translateY(-2px);
        box-shadow: $ufpel-box-shadow;
    }
    
    &:active {
        transform: translateY(0);
        box-shadow: $ufpel-box-shadow-sm;
    }
}

@mixin ufpel-hover-grow() {
    @include ufpel-transition(transform);
    
    &:hover {
        transform: scale(1.05);
    }
    
    &:active {
        transform: scale(1);
    }
}

@mixin ufpel-hover-shadow() {
    @include ufpel-transition(box-shadow);
    
    &:hover {
        box-shadow: $ufpel-box-shadow-lg;
    }
}

// Text effects
@mixin ufpel-text-shadow($size: medium) {
    @if $size == small {
        text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);
    } @else if $size == large {
        text-shadow: 3px 3px 6px rgba(0, 0, 0, 0.7);
    } @else {
        text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.5);
    }
}

@mixin ufpel-text-truncate() {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

@mixin ufpel-text-truncate-multiline($lines: 2) {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
}

// Gradients
@mixin ufpel-gradient-primary() {
    background: linear-gradient(135deg, $primarycolor 0%, $secondarycolor 100%);
}

@mixin ufpel-gradient-secondary() {
    background: linear-gradient(135deg, $secondarycolor 0%, lighten($secondarycolor, 20%) 100%);
}

@mixin ufpel-gradient-overlay($direction: to bottom) {
    background: linear-gradient(
        $direction,
        rgba(0, 0, 0, 0.1) 0%,
        rgba(0, 0, 0, 0.3) 50%,
        rgba(0, 0, 0, 0.6) 100%
    );
}

// Responsive mixins
@mixin ufpel-media-breakpoint-up($name) {
    $min: map-get($ufpel-breakpoints, $name);
    @if $min {
        @if $min != 0 {
            @media (min-width: $min) {
                @content;
            }
        } @else {
            @content;
        }
    }
}

@mixin ufpel-media-breakpoint-down($name) {
    $max: map-get($ufpel-breakpoints, $name);
    @if $max {
        @media (max-width: ($max - 0.02px)) {
            @content;
        }
    }
}

@mixin ufpel-media-breakpoint-between($lower, $upper) {
    $min: map-get($ufpel-breakpoints, $lower);
    $max: map-get($ufpel-breakpoints, $upper);
    
    @if $min and $max {
        @media (min-width: $min) and (max-width: ($max - 0.02px)) {
            @content;
        }
    }
}

@mixin ufpel-media-breakpoint-only($name) {
    $min: map-get($ufpel-breakpoints, $name);
    $next: map-get($ufpel-breakpoints, $name);
    
    @if $min and $next {
        @media (min-width: $min) and (max-width: ($next - 0.02px)) {
            @content;
        }
    } @else if $min {
        @media (min-width: $min) {
            @content;
        }
    }
}

// Buttons
@mixin ufpel-button-variant($bg, $border: $bg, $hover-bg: darken($bg, 7.5%), $hover-border: darken($border, 10%), $active-bg: darken($bg, 10%), $active-border: darken($border, 12.5%)) {
    color: color-contrast($bg);
    background-color: $bg;
    border-color: $border;
    @include ufpel-transition(color, background-color, border-color, box-shadow);
    
    &:hover {
        color: color-contrast($hover-bg);
        background-color: $hover-bg;
        border-color: $hover-border;
    }
    
    &:focus,
    &.focus {
        color: color-contrast($hover-bg);
        background-color: $hover-bg;
        border-color: $hover-border;
        box-shadow: 0 0 0 $ufpel-btn-focus-width rgba($bg, .5);
    }
    
    &:active,
    &.active,
    .show > &.dropdown-toggle {
        color: color-contrast($active-bg);
        background-color: $active-bg;
        border-color: $active-border;
    }
    
    &:disabled,
    &.disabled {
        color: color-contrast($bg);
        background-color: $bg;
        border-color: $border;
        opacity: $ufpel-btn-disabled-opacity;
    }
}

@mixin ufpel-button-outline-variant($color, $color-hover: color-contrast($color), $active-bg: $color, $active-border: $color) {
    color: $color;
    border-color: $color;
    background-color: transparent;
    @include ufpel-transition(color, background-color, border-color, box-shadow);
    
    &:hover {
        color: $color-hover;
        background-color: $active-bg;
        border-color: $active-border;
    }
    
    &:focus,
    &.focus {
        box-shadow: 0 0 0 $ufpel-btn-focus-width rgba($color, .5);
    }
    
    &:active,
    &.active,
    &.dropdown-toggle.show {
        color: color-contrast($active-bg);
        background-color: $active-bg;
        border-color: $active-border;
        
        &:focus {
            box-shadow: 0 0 0 $ufpel-btn-focus-width rgba($color, .5);
        }
    }
    
    &:disabled,
    &.disabled {
        color: $color;
        background-color: transparent;
        opacity: $ufpel-btn-disabled-opacity;
    }
}

@mixin ufpel-button-size($padding-y, $padding-x, $font-size, $border-radius) {
    padding: $padding-y $padding-x;
    font-size: $font-size;
    border-radius: $border-radius;
}

// Cards
@mixin ufpel-card-variant($background, $border: $background, $color: color-contrast($background)) {
    background-color: $background;
    border-color: $border;
    color: $color;
    
    .card-header,
    .card-footer {
        background-color: transparent;
        border-color: $border;
    }
    
    .card-header {
        border-bottom-color: $border;
    }
    
    .card-footer {
        border-top-color: $border;
    }
    
    .card-title,
    .card-subtitle {
        color: $color;
    }
}

// Forms
@mixin ufpel-form-control-focus($ignore-warning: false) {
    &:focus {
        color: $ufpel-input-focus-color;
        background-color: $ufpel-input-focus-bg;
        border-color: $ufpel-input-focus-border-color;
        outline: 0;
        box-shadow: $ufpel-input-focus-box-shadow;
    }
}

@mixin ufpel-form-validation-state($state, $color, $icon) {
    .#{$state}-feedback {
        display: none;
        width: 100%;
        margin-top: $ufpel-spacer * .25;
        font-size: $ufpel-font-size-sm;
        color: $color;
    }
    
    .#{$state}-tooltip {
        position: absolute;
        top: 100%;
        z-index: 5;
        display: none;
        max-width: 100%;
        padding: $ufpel-spacer * .25 $ufpel-spacer * .5;
        margin-top: .1rem;
        font-size: $ufpel-font-size-sm;
        color: color-contrast($color);
        background-color: $color;
        border-radius: $ufpel-border-radius;
    }
    
    .form-control {
        &.is-#{$state} {
            border-color: $color;
            
            @if $state == "valid" {
                padding-right: calc(1.5em + #{$ufpel-input-padding-x * 2});
                background-image: url("data:image/svg+xml,#{$icon}");
                background-repeat: no-repeat;
                background-position: right calc(.375em + #{$ufpel-input-padding-x * .5}) center;
                background-size: calc(.75em + #{$ufpel-input-padding-x * .5}) calc(.75em + #{$ufpel-input-padding-x * .5});
            }
            
            &:focus {
                border-color: $color;
                box-shadow: 0 0 0 $ufpel-input-focus-width rgba($color, .25);
            }
            
            ~ .#{$state}-feedback,
            ~ .#{$state}-tooltip {
                display: block;
            }
        }
    }
}

// Accessibility
@mixin ufpel-visually-hidden() {
    position: absolute !important;
    width: 1px !important;
    height: 1px !important;
    padding: 0 !important;
    margin: -1px !important;
    overflow: hidden !important;
    clip: rect(0, 0, 0, 0) !important;
    white-space: nowrap !important;
    border: 0 !important;
}

@mixin ufpel-visually-hidden-focusable() {
    &:not(:focus):not(:focus-within) {
        @include ufpel-visually-hidden();
    }
}

// Loading states
@mixin ufpel-loading-spinner($size: 1rem, $color: $primarycolor) {
    display: inline-block;
    width: $size;
    height: $size;
    border: 2px solid rgba($color, 0.2);
    border-radius: 50%;
    border-top-color: $color;
    animation: ufpel-spin 0.8s linear infinite;
}

@mixin ufpel-skeleton-loading() {
    background: linear-gradient(
        90deg,
        rgba(0, 0, 0, 0.1) 25%,
        rgba(0, 0, 0, 0.05) 50%,
        rgba(0, 0, 0, 0.1) 75%
    );
    background-size: 200% 100%;
    animation: ufpel-skeleton 1.5s ease-in-out infinite;
}

// Animations
@keyframes ufpel-spin {
    to {
        transform: rotate(360deg);
    }
}

@keyframes ufpel-skeleton {
    0% {
        background-position: 200% 0;
    }
    100% {
        background-position: -200% 0;
    }
}

@keyframes ufpel-fade-in {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

@keyframes ufpel-slide-up {
    from {
        transform: translateY(1rem);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

@keyframes ufpel-slide-down {
    from {
        transform: translateY(-1rem);
        opacity: 0;
    }
    to {
        transform: translateY(0);
        opacity: 1;
    }
}

// Utility classes generators
@mixin ufpel-generate-utility($utility, $infix: "") {
    $values: map-get($utility, values);
    
    @if type-of($values) == "string" or type-of(nth($values, 1)) != "list" {
        $values: zip($values, $values);
    }
    
    @each $key, $value in $values {
        $properties: map-get($utility, property);
        
        @if type-of($properties) == "string" {
            $properties: append((), $properties);
        }
        
        $property-class: if(map-has-key($utility, class), map-get($utility, class), nth($properties, 1));
        $property-class: if($key != "", "#{$property-class}-#{$key}", $property-class);
        $property-class: if($infix != "", "#{$property-class}#{$infix}", $property-class);
        
        .#{$property-class} {
            @each $property in $properties {
                #{$property}: $value !important;
            }
        }
    }
}