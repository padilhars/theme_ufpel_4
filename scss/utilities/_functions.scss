// This file is part of Moodle - http://moodle.org/
//
// Moodle is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// Moodle is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.

/**
 * SCSS Functions for UFPel theme.
 *
 * @package    theme_ufpel
 * @copyright  2025 Universidade Federal de Pelotas
 * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later
 */

// ============================================================================
// UFPel Theme Functions
// ============================================================================

// Color manipulation functions
@function ufpel-color-lighten($color, $amount) {
    @return lighten($color, $amount);
}

@function ufpel-color-darken($color, $amount) {
    @return darken($color, $amount);
}

@function ufpel-color-mix($color1, $color2, $weight: 50%) {
    @return mix($color1, $color2, $weight);
}

@function ufpel-color-tint($color, $weight) {
    @return mix(white, $color, $weight);
}

@function ufpel-color-shade($color, $weight) {
    @return mix(black, $color, $weight);
}

@function ufpel-color-shift($color, $weight) {
    @return if($weight > 0, ufpel-color-shade($color, $weight), ufpel-color-tint($color, -$weight));
}

// Color contrast function (simplified version for Bootstrap 5 compatibility)
@function color-contrast($background) {
    $l: luminance($background);
    $contrast-light: luminance(white);
    $contrast-dark: luminance(black);
    
    @if abs($l - $contrast-light) > abs($l - $contrast-dark) {
        @return white;
    } @else {
        @return black;
    }
}

// Luminance calculation
@function luminance($color) {
    $rgb: (
        "r": red($color),
        "g": green($color),
        "b": blue($color)
    );
    
    @each $name, $value in $rgb {
        $value: $value / 255;
        
        @if $value < 0.03928 {
            $value: $value / 12.92;
        } @else {
            $value: pow(($value + 0.055) / 1.055, 2.4);
        }
        
        $rgb: map-merge($rgb, ($name: $value));
    }
    
    @return (map-get($rgb, "r") * 0.2126) + (map-get($rgb, "g") * 0.7152) + (map-get($rgb, "b") * 0.0722);
}

// Power function for luminance calculation
@function pow($number, $exponent) {
    $value: 1;
    
    @if $exponent > 0 {
        @for $i from 1 through $exponent {
            $value: $value * $number;
        }
    } @else if $exponent < 0 {
        @for $i from 1 through -$exponent {
            $value: $value / $number;
        }
    }
    
    @return $value;
}

// Strip unit from value
@function strip-unit($value) {
    @return $value / ($value * 0 + 1);
}

// Convert px to rem
@function to-rem($value, $base: 16px) {
    @if type-of($value) != "number" {
        @warn "Value must be a number";
        @return $value;
    }
    
    @if unit($value) == "rem" {
        @return $value;
    }
    
    @return strip-unit($value) / strip-unit($base) * 1rem;
}

// Convert rem to px
@function to-px($value, $base: 16px) {
    @if type-of($value) != "number" {
        @warn "Value must be a number";
        @return $value;
    }
    
    @if unit($value) == "px" {
        @return $value;
    }
    
    @return strip-unit($value) * strip-unit($base) * 1px;
}

// Get value from nested map
@function map-deep-get($map, $keys...) {
    @each $key in $keys {
        $map: map-get($map, $key);
        
        @if $map == null {
            @return null;
        }
    }
    
    @return $map;
}

// Set value in nested map
@function map-deep-set($map, $keys, $value) {
    $maps: ($map,);
    $result: null;
    
    @if length($keys) == 1 {
        @return map-merge($map, ($keys: $value));
    }
    
    @for $i from 1 through length($keys) - 1 {
        $current-key: nth($keys, $i);
        $current-map: nth($maps, -1);
        $current-get: map-get($current-map, $current-key);
        
        @if $current-get == null {
            $current-get: ();
        }
        
        $maps: append($maps, $current-get);
    }
    
    @for $i from length($maps) through 1 {
        $current-map: nth($maps, $i);
        $current-key: nth($keys, $i);
        $current-val: if($i == length($maps), $value, $result);
        $result: map-merge($current-map, ($current-key: $current-val));
    }
    
    @return $result;
}

// Check if value is in list
@function list-contains($list, $value) {
    @return index($list, $value) != null;
}

// Get breakpoint value
@function breakpoint-min($name) {
    $min: map-get($ufpel-breakpoints, $name);
    @return if($min != 0, $min, null);
}

@function breakpoint-max($name) {
    $max: map-get($ufpel-breakpoints, $name);
    @return if($max and $max > 0, $max - 0.02, null);
}

// Get next breakpoint
@function breakpoint-next($name) {
    $breakpoint-names: map-keys($ufpel-breakpoints);
    $n: index($breakpoint-names, $name);
    @return if($n != null and $n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);
}

// Create responsive property
@function responsive-property($property, $min, $max, $viewport-min: 320px, $viewport-max: 1200px) {
    $responsive: calc(#{$min} + #{strip-unit($max - $min)} * ((100vw - #{$viewport-min}) / #{strip-unit($viewport-max - $viewport-min)}));
    @return $responsive;
}

// Z-index management
@function z-index($layer) {
    $z-indexes: (
        dropdown: $ufpel-zindex-dropdown,
        sticky: $ufpel-zindex-sticky,
        fixed: $ufpel-zindex-fixed,
        drawer: $ufpel-zindex-drawer,
        modal-backdrop: $ufpel-zindex-modal-backdrop,
        modal: $ufpel-zindex-modal,
        popover: $ufpel-zindex-popover,
        tooltip: $ufpel-zindex-tooltip,
        notification: $ufpel-zindex-notification,
        scroll-top: $ufpel-zindex-scroll-top
    );
    
    @if map-has-key($z-indexes, $layer) {
        @return map-get($z-indexes, $layer);
    }
    
    @warn "Unknown z-index layer `#{$layer}`";
    @return null;
}

// Get spacing value
@function spacing($key) {
    @if map-has-key($ufpel-spacers, $key) {
        @return map-get($ufpel-spacers, $key);
    }
    
    @warn "Unknown spacing key `#{$key}`";
    @return null;
}

// Create CSS variable
@function css-var($name) {
    @return var(--ufpel-#{$name});
}

// Encode SVG for data URI
@function svg-encode($svg) {
    $encoded: "";
    $slice: 2000;
    $index: 0;
    $loops: ceil(str-length($svg) / $slice);
    
    @for $i from 1 through $loops {
        $chunk: str-slice($svg, $index, $index + $slice - 1);
        $chunk: str-replace($chunk, '"', "'");
        $chunk: str-replace($chunk, "%", "%25");
        $chunk: str-replace($chunk, "#", "%23");
        $chunk: str-replace($chunk, "{", "%7B");
        $chunk: str-replace($chunk, "}", "%7D");
        $chunk: str-replace($chunk, "<", "%3C");
        $chunk: str-replace($chunk, ">", "%3E");
        
        $encoded: #{$encoded}#{$chunk};
        $index: $index + $slice;
    }
    
    @return "data:image/svg+xml,#{$encoded}";
}

// String replace function
@function str-replace($string, $search, $replace: "") {
    $index: str-index($string, $search);
    
    @if $index {
        @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    
    @return $string;
}

// Clamp value between min and max
@function clamp-value($min, $val, $max) {
    @return max($min, min($max, $val));
}

// Calculate aspect ratio
@function aspect-ratio($width, $height) {
    @return percentage($height / $width);
}

// Generate unique ID
@function unique-id($prefix: "ufpel") {
    @return unquote("#{$prefix}-#{unique-id()}");
}

// Check if color is dark
@function is-dark($color) {
    @return luminance($color) < 0.5;
}

// Check if color is light
@function is-light($color) {
    @return luminance($color) >= 0.5;
}

// Get readable color on background
@function readable-color($bg-color, $light-color: white, $dark-color: black) {
    @if is-dark($bg-color) {
        @return $light-color;
    } @else {
        @return $dark-color;
    }
}